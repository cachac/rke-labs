#
# instalation with RKE (1 master-2ram, 2 workers-1ram, metallb + nginx LB-0.5ram)
#

# alias
https://github.com/ahmetb/kubectl-aliases

#
# metalLB ( solo on-prem)
#
https://metallb.universe.tf/installation/

# get ip range from nodes: ej: 10.128.0.20-10.128.0.25
# install by manifest
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.4/manifests/namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.4/manifests/metallb.yaml
# On first install only copy rand and paste
$(openssl rand -base64 128)
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=<paste>

# config map
ka metalLB/metalLB-cm.yaml

# check: running pods
kubectl get pods -n metallb-system

# testing
kubectl apply -f metalLB/tester.yaml
kg svc

curl <EXTERNAL-IP>
# result: <title>Welcome to nginx!</title>

# external loadBalancer (extra)
# install nginx and config


# Ingress crontroller
# check option ingress + cert + helm:
https://cert-manager.io/docs/tutorials/acme/ingress/
  # using helm: https://github.com/kubernetes/ingress-nginx/tree/master/charts/ingress-nginx
# la opci√≥n del link anterior muestra un external LB, probar.

#
# Rancher option (add-ons)
https://rancher.com/docs/rke/latest/en/config-options/add-ons/ingress-controllers/
https://blog.weareopensource.me/rancher-lets-encrypt-set-up-with-ingress-nginx-cert-manager/

#
# cert-manager install (kubectl)
#
# cert manager docs
https://cert-manager.io/docs/installation/kubernetes/
https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-with-cert-manager-on-digitalocean-kubernetes-es

# clean
# with kubectl
kubectl delete -f https://github.com/jetstack/cert-manager/releases/download/v0.15.0/cert-manager.yaml
kubectl delete apiservice v1beta1.webhook.cert-manager.io
kubectl delete namespace cert-manager
# by security : issuer
kubectl delete letsencrypt-staging
kubectl delete letsencrypt-prod
kubectl delete issuers.cert-manager.io letsencrypt-staging
kubectl delete issuers.cert-manager.io letsencrypt-prod
# install CRD's with kubectl
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.3/cert-manager.crds.yaml
# check
kubectl get all -n cert-manager
# Add Let's Encrypt Issuer, download link, edit mail and save STAG
kubectl create --namespace default --edit -f https://cert-manager.io/docs/tutorials/acme/example/staging-issuer.yaml
# Add Let's Encrypt Issuer, download link, edit mail and save PROD
kubectl create --namespace default --edit -f https://cert-manager.io/docs/tutorials/acme/example/production-issuer.yaml
# tip: create issuer or clusterIssuer https://cert-manager.io/docs/configuration/acme/
# check
kubectl describe issuers.cert-manager.io letsencrypt-staging
or
kubectl describe clusterissuers.cert-manager.io letsencrypt-staging
# cert logs
kubectl logs -n cert-manager deploy/cert-manager -f
# create CERT
kubectl create -f staging_certificate.yml
# check cert
kubectl describe certificate ranchertest-tk
# check csr
kd  certificaterequest


# ingress controller
# rke create a default ingress controller

#
# option: NGINX ingress controller option ( USER DAEMON SET ) without cert manager
#
# option 1: helm: https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-helm/
git clone https://github.com/nginxinc/kubernetes-ingress/
cd kubernetes-ingress/deployments/helm-chart
git checkout v1.9.0
helm repo add nginx-stable https://helm.nginx.com/stable
helm repo update
helm install my-release nginx-stable/nginx-ingress






# option 2: manifest: https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/

# sa - rbac - secrets - cm - deploy
kubectl apply -f common/ns-and-sa.yaml
kubectl apply -f rbac/rbac.yaml
kubectl apply -f common/default-server-secret.yaml
kubectl apply -f common/nginx-config.yaml
kubectl apply -f daemon-set/nginx-ingress.yaml


#
# APP deploy, svc, ingress
#
# check option: https://kubernetes.io/docs/concepts/services-networking/ingress/

ka app/deployment.yaml
ka app/ingress.yaml
ka app/clusterIP.yaml

curl -I <klab.ranchertest.tk>
status 200 !!!!!!!!!!!!
