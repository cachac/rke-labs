#
# instalation with RKE (1 master-2ram, 2 workers-1ram, metallb + nginx LB-0.5ram)
#

# alias
https://github.com/ahmetb/kubectl-aliases

#
# metalLB ( solo on-prem)
#
https://metallb.universe.tf/installation/

# get ip range from nodes: ej: 10.128.0.20-10.128.0.25
# install by manifest
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.4/manifests/namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.4/manifests/metallb.yaml
# On first install only copy rand and paste
$(openssl rand -base64 128)
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=<paste>

# config map
ka metalLB/metalLB-cm.yaml

# check: running pods
kubectl get pods -n metallb-system

# testing
kubectl apply -f metalLB/tester.yaml
kg svc

curl <EXTERNAL-IP>
# result: <title>Welcome to nginx!</title>

# external loadBalancer (extra)
# install nginx and config

#
# Ingress crontroller
#
#

# Rancher option (add-ons)
https://rancher.com/docs/rke/latest/en/config-options/add-ons/ingress-controllers/
https://blog.weareopensource.me/rancher-lets-encrypt-set-up-with-ingress-nginx-cert-manager/
# rke create a default ingress controller

#
# option: NGINX ingress controller option ( USER DAEMON SET, to use without external LB, ACCESSING NODE PORT ) without cert manager
# https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/

git clone https://github.com/nginxinc/kubernetes-ingress/
cd kubernetes-ingress/deployments
git checkout v1.9.0
# sa - rbac - secrets - cm - deploy
kubectl apply -f common/ns-and-sa.yaml
kubectl apply -f rbac/rbac.yaml
kubectl apply -f common/default-server-secret.yaml
kubectl apply -f common/nginx-config.yaml
kubectl apply -f common/ingress-class.yaml

kubectl apply -f daemon-set/nginx-ingress.yaml

# check
kubectl get pods --namespace=nginx-ingress

# node port
kubectl create -f service/nodeport.yaml


# option 2: helm: https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-helm/
  # using a load balancer by default
    git clone https://github.com/nginxinc/kubernetes-ingress/
    cd kubernetes-ingress/deployments/helm-chart
    git checkout v1.9.0
    helm repo add nginx-stable https://helm.nginx.com/stable
    helm repo update
    helm install my-ingress-controller nginx-stable/nginx-ingress

### otra opci√≥n por probar: ingress-nginx NO OFICIAL nginx. Hecho por la comunidad K8s
    helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo add stable https://kubernetes-charts.storage.googleapis.com/
    helm repo update
    helm install my-ingress-controller ingress-nginx/ingress-nginx
###



#
# cert-manager install (kubectl)
#
# cert manager docs
https://cert-manager.io/docs/installation/kubernetes/
https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-with-cert-manager-on-digitalocean-kubernetes-es

# clean
# with kubectl
kubectl delete -f https://github.com/jetstack/cert-manager/releases/download/v1.0.3/cert-manager.yaml
kubectl delete apiservice v1beta1.webhook.cert-manager.io
kubectl delete namespace cert-manager
# by security : issuer
kubectl delete letsencrypt-staging
kubectl delete letsencrypt-prod
kubectl delete issuers.cert-manager.io letsencrypt-staging
kubectl delete issuers.cert-manager.io letsencrypt-prod


#
# option 1
#
# install - https://cert-manager.io/docs/installation/kubernetes/
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.3/cert-manager.yaml

# lets encrypt issuer
# create definition and edit (stag and prod)
kubectl create --edit -f https://cert-manager.io/docs/tutorials/acme/example/staging-issuer.yaml
kubectl create --edit -f https://cert-manager.io/docs/tutorials/acme/example/production-issuer.yaml


#
# option 2 helm
#
kubectl create namespace cert-manager
helm repo add jetstack https://charts.jetstack.io
helm repo update

helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --version v1.0.3 \
  --set installCRDs=true


# check =
# Message:               The ACME account was registered with the ACME server
# Reason:                ACMEAccountRegistered
# Status:                True
kubectl describe issuer letsencrypt-staging
kubectl describe clusterIssuer letsencrypt-staging
# challenge
kubectl describe challenge | grep State
# cert
kubectl describe certificate
# secret
kubectl describe secret <secretName>
#  trouble: cert logs
kubectl logs -n cert-manager deploy/cert-manager -f

# tls ingress staging
metadata:
  name: <ingressCustomName>
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/issuer: "letsencrypt-staging"
spec:
  tls:
  - hosts:
    - <example.example.com>
    secretName: <quickstart-example-tls>

# test certificates
# update to producction
# delete secrets, to renew certs
kubectl delete secret <quickstart-example-tls>
# check production certs
kubectl describe certificate quickstart-example-tls
kubectl describe order <quickstart-example-tls-889745041>
kubectl describe challenge <quickstart-example-tls-889745041-0>


# test option
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.12.0/cert-manager.yaml
kubectl create namespace cert-manager
##


# install CRD's with kubectl
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.3/cert-manager.crds.yaml


# check
kubectl get all -n cert-manager
# Add Let's Encrypt Issuer, download link, edit mail and save STAG
kubectl create --namespace default --edit -f https://cert-manager.io/docs/tutorials/acme/example/staging-issuer.yaml
# Add Let's Encrypt Issuer, download link, edit mail and save PROD
kubectl create --namespace default --edit -f https://cert-manager.io/docs/tutorials/acme/example/production-issuer.yaml
# tip: create issuer or clusterIssuer https://cert-manager.io/docs/configuration/acme/
# check
kubectl describe issuers.cert-manager.io letsencrypt-staging
or
kubectl describe clusterissuers.cert-manager.io letsencrypt-staging

# create CERT
kubectl create -f staging_certificate.yml
# check cert
kubectl describe certificate ranchertest-tk
# check csr
kd  certificaterequest











#
# APP deploy, svc, ingress
#
# check option: https://kubernetes.io/docs/concepts/services-networking/ingress/

ka app/deployment.yaml
ka app/ingress.yaml
ka app/clusterIP.yaml

curl -I <klab.ranchertest.tk>
status 200 !!!!!!!!!!!!


#
# nfs
#
apt install nfs-kernel-server
sudo apt update
sudo apt install nfs-common
sudo systemctl start nfs-server

sudo nano /etc/exports
 =
 /mnt/disks              *(rw,no_root_squash,sync,no_subtree_check,insecure)


# *** montar discos externos ***

# share

# create dirs if needed
sudo mkdir -p /mnt/disks
sudo mkdir -p /mnt/disks/{pv0,pv1,pv2,pv3,pv4}
#
sudo chmod 777 /mnt/disks/*/*
sudo exportfs -rav
  # =
  # exporting *:/mnt/disks

# test
sudo exportfs -v
showmount -e

# client
sudo apt install nfs-common -y
sudo mount -t nfs rke-master01:/mnt/disks /mnt
showmount -e rke-master01

#
# mongodb operator  if needed
#
git clone https://github.com/mongodb/mongodb-kubernetes-operator.git
kubectl create -f mongodb-kubernetes-operator/deploy/crds/mongodb.com_mongodb_crd.yaml
kubectl get crd/mongodb.mongodb.com
kubectl create -f mongodb-kubernetes-operator/deploy/

# mongodb statefulset
# ka mongodb-rs.yaml

# test
kubectl get pods
kubectl describe endpoints mongodb-svc

# rs
rs.initiate({_id: "rs0", version: 1, members: [
  { _id: 0, host : "mongodb-storylabs-0.mongodb-svc.default.svc.cluster.local:27017" },
  { _id: 1, host : "mongodb-storylabs-1.mongodb-svc.default.svc.cluster.local:27017" },
  { _id: 2, host : "mongodb-storylabs-2.mongodb-svc.default.svc.cluster.local:27017" }
]});


# nodeport
kubectl expose pod/mongodb-storylabs-0 --type="NodePort" --port 27017
kubectl expose pod/mongodb-storylabs-1 --type="NodePort" --port 27017
kubectl expose pod/mongodb-storylabs-2 --type="NodePort" --port 27017
